class BFS /*проблема: почему-то неправильно рисует, начинает не с самого старта, 
разрушает стенки(хотя условия не позволяют вроде) также происходит переполнение(?) чего-то и все крашится памагите*/
{
    field Maze maze;
    field Queue queue;
    field TwoDimensionalArray visited;
    field int startX, startY, exitX, exitY;
    field boolean found;

    constructor BFS new(Maze m) 
    {
        let maze = m;
        let queue = Queue.new(300); //225 макс значений(ну так должно быть), но пусть +дополнительно
        let visited = TwoDimensionalArray.new(15, 15);
        let found = false;
        return this;
    }
    
    method void initialize() 
    {
        var TwoDimensionalArray map;
        var int i, j;
        let i = 0;
        while (i < 15) 
        {
            let j = 0;
            while (j < 15) 
            {
                do visited.setIntValue(i, j, 0); // 0 = не посещено
                let j = j + 1;
            }
            let i = i + 1;
        }

        let map = maze.getMap(); //инициализация старта и выхода
        let i = 0;
        while (i < 15) 
        {
            let j = 0;
            while (j < 15) 
            {
                if (map.getCharValue(i, j) = "S") 
                {
                    let startX = i;
                    let startY = j;
                }
                if (map.getCharValue(i, j) = "E") 
                {
                    let exitX = i;
                    let exitY = j;
                }
                let j = j + 1;
            }
            let i = i + 1;
        }
        return;
    }
    
    method void run() 
    {
        var TwoDimensionalArray map;
        var int x, y;
        do initialize();
        do queue.enqueue(startX);
        do queue.enqueue(startY);
        let map = maze.getMap();
        while (~(queue.isEmpty()))
        {
            let x = queue.dequeue();
            let y = queue.dequeue();
            
            if (maze.IsValid(x, y)) 
            {
                if (~(map.getCharValue(x, y) = "W") | (visited.getIntValue(x, y) = 1)) 
                {
                    do visited.setIntValue(x, y, 1);
                    do map.setCharValue(x, y, "."); //помечаем

                    do Output.moveCursor(0, 0); //чтоб новая карта рядом со старой не рисовалась, а все на одном месте.
                    do maze.Print(); //обновляем maze
                    do Sys.wait(100); //задержка для анимации
                    
                    // проверка выхода
                    if ((x = exitX) & (y = exitY)) {
                        let found = true;
                        do Output.printString("Exit found!");
                    }
                    //добавляем соседей в очередь(лучше сразу проверить на условия, 
                    //а то очередь переполняется как я поняла(не уверена))
                    if ((map.getCharValue(x - 1, y) = " " | map.getCharValue(x - 1, y) = "E") 
                    & visited.getIntValue(x - 1, y) = 0) {
                        do queue.enqueue(x - 1); do queue.enqueue(y);  }

                    if ((map.getCharValue(x + 1, y) = " " | map.getCharValue(x + 1, y) = "E") 
                    & visited.getIntValue(x + 1, y) = 0) {
                        do queue.enqueue(x + 1); do queue.enqueue(y);  }

                    if ((map.getCharValue(x, y - 1) = " " | map.getCharValue(x, y - 1) = "E") 
                    & visited.getIntValue(x, y - 1) = 0) {
                        do queue.enqueue(x); do queue.enqueue(y - 1);  }

                    if ((map.getCharValue(x, y + 1) = " " | map.getCharValue(x, y + 1) = "E") 
                    & visited.getIntValue(x, y + 1) = 0) {
                        do queue.enqueue(x); do queue.enqueue(y + 1);  }
                }
            }
        }
        if (~found) 
        {
            do Output.printString("Exit not found!");
        }
        return;
    }
    
    method void dispose() 
    {
        do queue.dispose();
        do visited.dispose();
        return;
    }
}