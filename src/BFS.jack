class BFS /*проблема: хавает все на своем пути. а также почему-то создается bfs в точке 14,14*/
{
    field Maze maze;
    field Queue queue;
    field TwoDimensionalArray visited;
    field int startX, startY, exitX, exitY;
    field boolean found;

    constructor BFS new(Maze m) 
    {
        let startX = 0;
        let startY = 1;
        let exitX = 14;
        let exitY = 13;
        let maze = m;
        let queue = Queue.new(300); //225 макс значений, но пусть +дополнительно
        let visited = TwoDimensionalArray.new(15, 15);
        let found = false;
        return this;
    }
    
    method void initialize() 
    {
        var TwoDimensionalArray map;
        var int i, j;
        let i = 0;
        while (i < 15) 
        {
            let j = 0;
            while (j < 15) 
            {
                do visited.setIntValue(i, j, 0); // 0 = не посещено
                let j = j + 1;
            }
            let i = i + 1;
        }
        return;
    }
    
    method void run() 
    {
        var TwoDimensionalArray map;
        var int x, y;
        do initialize();
        do queue.enqueue(startY);
        do queue.enqueue(startX);
        let map = maze.getMap();
        while (~(queue.isEmpty()))
        {
            let y = queue.dequeue();
            let x = queue.dequeue();
            
            if (maze.IsValid(y, x)) 
            {
                if ((~(map.getCharValue(y, x) = "W")) & (visited.getIntValue(y, x) = 0)) 
                {
                    do visited.setIntValue(y, x, 1);
                    do map.setCharValue(y, x, "."); //помечаем

                    do Output.moveCursor(0, 0); //чтоб новая карта рядом со старой не рисовалась, а все на одном месте.
                    do maze.Print(); //обновляем maze
                    do Sys.wait(10); //задержка для анимации
                    
                    // проверка выхода
                    if ((x = exitX) & (y = exitY)) {
                        let found = true;
                        do Output.printString("Exit found!");
                    }
                    //добавляем соседей в очередь
                    if ((map.getCharValue(y - 1, x) = " " | map.getCharValue(y - 1, x) = "E") 
                    & visited.getIntValue(y - 1, x) = 0 & maze.IsValid(y - 1, x)) {
                        do queue.enqueue(y - 1); do queue.enqueue(x);  }

                    if ((map.getCharValue(y + 1, x) = " " | map.getCharValue(y + 1, x) = "E") 
                    & visited.getIntValue(y + 1, x) = 0 & maze.IsValid(y + 1, x)) {
                        do queue.enqueue(y + 1); do queue.enqueue(x);  }

                    if ((map.getCharValue(y, x - 1) = " " | map.getCharValue(y, x - 1) = "E") 
                    & visited.getIntValue(y, x - 1) = 0 & maze.IsValid(y, x - 1)) {
                        do queue.enqueue(y); do queue.enqueue(x - 1);  }

                    if ((map.getCharValue(y, x + 1) = " " | map.getCharValue(y, x + 1) = "E") 
                    & visited.getIntValue(y, x + 1) = 0 & maze.IsValid(y, x + 1)) {
                        do queue.enqueue(y); do queue.enqueue(x + 1);  }
                }
            }
        }
        if (~found) 
        {
            do Output.printString("Exit not found!");
        }
        return;
    }
    
    method void dispose() 
    {
        do queue.dispose();
        do visited.dispose();
        return;
    }
}
